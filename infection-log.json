{"stats":{"totalMutantsCount":36,"killedCount":35,"notCoveredCount":0,"escapedCount":1,"errorCount":0,"syntaxErrorCount":0,"skippedCount":0,"ignoredCount":0,"timeOutCount":0,"msi":97.22,"mutationCodeCoverage":100,"coveredCodeMsi":97.22},"escaped":[{"mutator":{"mutatorName":"FunctionCall","originalSourceCode":"<?php\n\nnamespace App\\Http\\Controllers\\Authentication;\n\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Requests\\LoginUserRequest;\nuse App\\Models\\User;\nuse Exception;\nuse App\\Services\\AuthService;\nclass AuthController extends Controller\n{\n    public function getUserTheLoginView()\n    {\n        return view('cms.auth.login');\n    }\n    public function loginUser(LoginUserRequest $request)\n    {\n        try {\n            $data = $request->validated();\n            $user = User::where('email', $data['email'])->first();\n            $auth = new AuthService($user, $data);\n            $auth->redirectUserIfAlreadyLoggedIn();\n            $auth->redirectUserIfPasswordIsIncorrect();\n            auth()->login($user);\n            return redirect()->to(route('cms.groups.index'));\n        } catch (Exception $e) {\n            return redirect()->back()->with('message', $e->getMessage());\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Http\\Controllers\\Authentication;\n\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Requests\\LoginUserRequest;\nuse App\\Models\\User;\nuse Exception;\nuse App\\Services\\AuthService;\nclass AuthController extends Controller\n{\n    public function getUserTheLoginView()\n    {\n        view('cms.auth.login');\n        return null;\n    }\n    public function loginUser(LoginUserRequest $request)\n    {\n        try {\n            $data = $request->validated();\n            $user = User::where('email', $data['email'])->first();\n            $auth = new AuthService($user, $data);\n            $auth->redirectUserIfAlreadyLoggedIn();\n            $auth->redirectUserIfPasswordIsIncorrect();\n            auth()->login($user);\n            return redirect()->to(route('cms.groups.index'));\n        } catch (Exception $e) {\n            return redirect()->back()->with('message', $e->getMessage());\n        }\n    }\n}","originalFilePath":"\/var\/www\/html\/app\/Http\/Controllers\/Authentication\/AuthController.php","originalStartLine":16},"diff":"--- Original\n+++ New\n@@ @@\n {\n     public function getUserTheLoginView()\n     {\n-        return view('cms.auth.login');\n+        view('cms.auth.login');\n+        return null;\n     }\n     public function loginUser(LoginUserRequest $request)\n     {","processOutput":"PHPUnit 9.5.25 #StandWithUkraine\n\n.....                                                               5 \/ 5 (100%)\n\nTime: 00:00.484, Memory: 38.50 MB\n\nOK (5 tests, 8 assertions)"}],"timeouted":[],"killed":[{"mutator":{"mutatorName":"FunctionCall","originalSourceCode":"<?php\n\nnamespace App\\Http\\Controllers\\Cms;\n\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Requests\\GroupRequest;\nuse App\\Models\\Group;\nuse App\\Services\\GroupService;\nuse Illuminate\\Http\\Request;\nclass GroupController extends Controller\n{\n    private $service;\n    public function __construct(GroupService $service)\n    {\n        $this->service = $service;\n    }\n    \/**\n     * Display a listing of the resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     *\/\n    public function index()\n    {\n        $groups = $this->service->listAll();\n        return view('cms.groups.index', compact('groups'));\n    }\n    \/**\n     * Show the form for creating a new resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     *\/\n    public function create()\n    {\n        \/\/\n    }\n    \/**\n     * Store a newly created resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\Response\n     *\/\n    public function store(GroupRequest $request)\n    {\n        $result = $this->service->create($request->all());\n        return redirect()->back()->with('response', $result);\n    }\n    \/**\n     * Display the specified resource.\n     *\n     * @param  int  $id\n     * @return \\Illuminate\\Http\\Response\n     *\/\n    public function show($id)\n    {\n        \/\/\n    }\n    \/**\n     * Show the form for editing the specified resource.\n     *\n     * @param  int  $id\n     * @return \\Illuminate\\Http\\Response\n     *\/\n    public function edit($id)\n    {\n        \/\/\n    }\n    \/**\n     * Update the specified resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  int  $id\n     * @return \\Illuminate\\Http\\Response\n     *\/\n    public function update(GroupRequest $request, $id)\n    {\n        $result = $this->service->update($id, $request->all());\n        return redirect()->back()->with('response', $result);\n    }\n    \/**\n     * Remove the specified resource from storage.\n     *\n     * @param  string  $groups_id\n     * @return \\Illuminate\\Http\\Response\n     *\/\n    public function destroy($groups_id)\n    {\n        $result = $this->service->delete($groups_id);\n        return redirect()->back()->with('response', $result);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Http\\Controllers\\Cms;\n\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Requests\\GroupRequest;\nuse App\\Models\\Group;\nuse App\\Services\\GroupService;\nuse Illuminate\\Http\\Request;\nclass GroupController extends Controller\n{\n    private $service;\n    public function __construct(GroupService $service)\n    {\n        $this->service = $service;\n    }\n    \/**\n     * Display a listing of the resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     *\/\n    public function index()\n    {\n        $groups = $this->service->listAll();\n        view('cms.groups.index', compact('groups'));\n        return null;\n    }\n    \/**\n     * Show the form for creating a new resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     *\/\n    public function create()\n    {\n        \/\/\n    }\n    \/**\n     * Store a newly created resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\Response\n     *\/\n    public function store(GroupRequest $request)\n    {\n        $result = $this->service->create($request->all());\n        return redirect()->back()->with('response', $result);\n    }\n    \/**\n     * Display the specified resource.\n     *\n     * @param  int  $id\n     * @return \\Illuminate\\Http\\Response\n     *\/\n    public function show($id)\n    {\n        \/\/\n    }\n    \/**\n     * Show the form for editing the specified resource.\n     *\n     * @param  int  $id\n     * @return \\Illuminate\\Http\\Response\n     *\/\n    public function edit($id)\n    {\n        \/\/\n    }\n    \/**\n     * Update the specified resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  int  $id\n     * @return \\Illuminate\\Http\\Response\n     *\/\n    public function update(GroupRequest $request, $id)\n    {\n        $result = $this->service->update($id, $request->all());\n        return redirect()->back()->with('response', $result);\n    }\n    \/**\n     * Remove the specified resource from storage.\n     *\n     * @param  string  $groups_id\n     * @return \\Illuminate\\Http\\Response\n     *\/\n    public function destroy($groups_id)\n    {\n        $result = $this->service->delete($groups_id);\n        return redirect()->back()->with('response', $result);\n    }\n}","originalFilePath":"\/var\/www\/html\/app\/Http\/Controllers\/Cms\/GroupController.php","originalStartLine":28},"diff":"--- Original\n+++ New\n@@ @@\n     public function index()\n     {\n         $groups = $this->service->listAll();\n-        return view('cms.groups.index', compact('groups'));\n+        view('cms.groups.index', compact('groups'));\n+        return null;\n     }\n     \/**\n      * Show the form for creating a new resource.","processOutput":"PHPUnit 9.5.25 #StandWithUkraine\n\nF\n\nTime: 00:00.409, Memory: 36.50 MB\n\nThere was 1 failure:\n\n1) Tests\\Feature\\Cms\\GroupsTest::a_user_can_see_the_listing_of_groups\nFailed asserting that '' contains \"aperiam\".\n\n\/var\/www\/html\/vendor\/laravel\/framework\/src\/Illuminate\/Testing\/TestResponse.php:531\n\/var\/www\/html\/tests\/Feature\/Cms\/GroupsTest.php:33\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"Throw_","originalSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\User;\nuse Exception;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Throwable;\nclass AuthService\n{\n    protected ?User $user;\n    protected array $data;\n    public function __construct(?User $user, array $data)\n    {\n        $this->user = $user;\n        $this->data = $data;\n    }\n    public function redirectUserIfAlreadyLoggedIn()\n    {\n        if (auth()->check()) {\n            throw new Exception('Voc\u00ea j\u00e1 est\u00e1 logado.');\n        }\n    }\n    public function redirectUserIfPasswordIsIncorrect()\n    {\n        if (!Hash::check($this->data['password'], $this->user->password)) {\n            throw new Exception('A senha est\u00e1 incorreta.');\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\User;\nuse Exception;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Throwable;\nclass AuthService\n{\n    protected ?User $user;\n    protected array $data;\n    public function __construct(?User $user, array $data)\n    {\n        $this->user = $user;\n        $this->data = $data;\n    }\n    public function redirectUserIfAlreadyLoggedIn()\n    {\n        if (auth()->check()) {\n            new Exception('Voc\u00ea j\u00e1 est\u00e1 logado.');\n        }\n    }\n    public function redirectUserIfPasswordIsIncorrect()\n    {\n        if (!Hash::check($this->data['password'], $this->user->password)) {\n            throw new Exception('A senha est\u00e1 incorreta.');\n        }\n    }\n}","originalFilePath":"\/var\/www\/html\/app\/Services\/AuthService.php","originalStartLine":24},"diff":"--- Original\n+++ New\n@@ @@\n     public function redirectUserIfAlreadyLoggedIn()\n     {\n         if (auth()->check()) {\n-            throw new Exception('Voc\u00ea j\u00e1 est\u00e1 logado.');\n+            new Exception('Voc\u00ea j\u00e1 est\u00e1 logado.');\n         }\n     }\n     public function redirectUserIfPasswordIsIncorrect()","processOutput":"PHPUnit 9.5.25 #StandWithUkraine\n\nF\n\nTime: 00:00.431, Memory: 36.50 MB\n\nThere was 1 failure:\n\n1) Tests\\Feature\\AuthTest::a_user_receives_an_error_message_if_already_logged\nFailed asserting that null matches expected 'Voc\u00ea j\u00e1 est\u00e1 logado.'.\n\n\/var\/www\/html\/vendor\/laravel\/framework\/src\/Illuminate\/Testing\/TestResponse.php:1183\n\/var\/www\/html\/tests\/Feature\/AuthTest.php:64\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"LogicalNot","originalSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\User;\nuse Exception;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Throwable;\nclass AuthService\n{\n    protected ?User $user;\n    protected array $data;\n    public function __construct(?User $user, array $data)\n    {\n        $this->user = $user;\n        $this->data = $data;\n    }\n    public function redirectUserIfAlreadyLoggedIn()\n    {\n        if (auth()->check()) {\n            throw new Exception('Voc\u00ea j\u00e1 est\u00e1 logado.');\n        }\n    }\n    public function redirectUserIfPasswordIsIncorrect()\n    {\n        if (!Hash::check($this->data['password'], $this->user->password)) {\n            throw new Exception('A senha est\u00e1 incorreta.');\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\User;\nuse Exception;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Throwable;\nclass AuthService\n{\n    protected ?User $user;\n    protected array $data;\n    public function __construct(?User $user, array $data)\n    {\n        $this->user = $user;\n        $this->data = $data;\n    }\n    public function redirectUserIfAlreadyLoggedIn()\n    {\n        if (auth()->check()) {\n            throw new Exception('Voc\u00ea j\u00e1 est\u00e1 logado.');\n        }\n    }\n    public function redirectUserIfPasswordIsIncorrect()\n    {\n        if (Hash::check($this->data['password'], $this->user->password)) {\n            throw new Exception('A senha est\u00e1 incorreta.');\n        }\n    }\n}","originalFilePath":"\/var\/www\/html\/app\/Services\/AuthService.php","originalStartLine":30},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function redirectUserIfPasswordIsIncorrect()\n     {\n-        if (!Hash::check($this->data['password'], $this->user->password)) {\n+        if (Hash::check($this->data['password'], $this->user->password)) {\n             throw new Exception('A senha est\u00e1 incorreta.');\n         }\n     }\n }","processOutput":"PHPUnit 9.5.25 #StandWithUkraine\n\nF\n\nTime: 00:00.380, Memory: 36.50 MB\n\nThere was 1 failure:\n\n1) Tests\\Feature\\AuthTest::a_user_can_login\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'http:\/\/localhost\/cms\/groups'\n+'http:\/\/localhost'\n\n\/var\/www\/html\/vendor\/laravel\/framework\/src\/Illuminate\/Testing\/TestResponse.php:322\n\/var\/www\/html\/vendor\/laravel\/framework\/src\/Illuminate\/Testing\/TestResponse.php:209\n\/var\/www\/html\/tests\/Feature\/AuthTest.php:34\n\nFAILURES!\nTests: 1, Assertions: 2, Failures: 1."},{"mutator":{"mutatorName":"Throw_","originalSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\User;\nuse Exception;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Throwable;\nclass AuthService\n{\n    protected ?User $user;\n    protected array $data;\n    public function __construct(?User $user, array $data)\n    {\n        $this->user = $user;\n        $this->data = $data;\n    }\n    public function redirectUserIfAlreadyLoggedIn()\n    {\n        if (auth()->check()) {\n            throw new Exception('Voc\u00ea j\u00e1 est\u00e1 logado.');\n        }\n    }\n    public function redirectUserIfPasswordIsIncorrect()\n    {\n        if (!Hash::check($this->data['password'], $this->user->password)) {\n            throw new Exception('A senha est\u00e1 incorreta.');\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\User;\nuse Exception;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Throwable;\nclass AuthService\n{\n    protected ?User $user;\n    protected array $data;\n    public function __construct(?User $user, array $data)\n    {\n        $this->user = $user;\n        $this->data = $data;\n    }\n    public function redirectUserIfAlreadyLoggedIn()\n    {\n        if (auth()->check()) {\n            throw new Exception('Voc\u00ea j\u00e1 est\u00e1 logado.');\n        }\n    }\n    public function redirectUserIfPasswordIsIncorrect()\n    {\n        if (!Hash::check($this->data['password'], $this->user->password)) {\n            new Exception('A senha est\u00e1 incorreta.');\n        }\n    }\n}","originalFilePath":"\/var\/www\/html\/app\/Services\/AuthService.php","originalStartLine":31},"diff":"--- Original\n+++ New\n@@ @@\n     public function redirectUserIfPasswordIsIncorrect()\n     {\n         if (!Hash::check($this->data['password'], $this->user->password)) {\n-            throw new Exception('A senha est\u00e1 incorreta.');\n+            new Exception('A senha est\u00e1 incorreta.');\n         }\n     }\n }","processOutput":"PHPUnit 9.5.25 #StandWithUkraine\n\nF\n\nTime: 00:00.430, Memory: 36.50 MB\n\nThere was 1 failure:\n\n1) Tests\\Feature\\AuthTest::a_user_cant_login_with_wrong_password\nFailed asserting that null matches expected 'A senha est\u00e1 incorreta.'.\n\n\/var\/www\/html\/vendor\/laravel\/framework\/src\/Illuminate\/Testing\/TestResponse.php:1183\n\/var\/www\/html\/tests\/Feature\/AuthTest.php:48\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"FunctionCall","originalSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\User;\nuse Exception;\nuse Illuminate\\Support\\Facades\\Hash;\nuse App\\Interfaces\\CRUD;\nclass CmsUserService implements CRUD\n{\n    public function create(array $data)\n    {\n        $data['token'] = Hash::make($data['email']);\n        $data['password'] = Hash::make($data['password']);\n        User::create($data);\n        return cms_response(trans('cms.users.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            if (array_key_exists('password', $data)) {\n                $data['password'] = Hash::make($data['password']);\n            }\n            $user = $this->__findOrFail($id);\n            $user->update($data);\n            return cms_response(trans('cms.users.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        User::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.users.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $user = User::find($id);\n        if ($user instanceof User) {\n            return $user;\n        }\n        throw new Exception(trans('cms.users.error_user_not_found'));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\User;\nuse Exception;\nuse Illuminate\\Support\\Facades\\Hash;\nuse App\\Interfaces\\CRUD;\nclass CmsUserService implements CRUD\n{\n    public function create(array $data)\n    {\n        $data['token'] = Hash::make($data['email']);\n        $data['password'] = Hash::make($data['password']);\n        User::create($data);\n        cms_response(trans('cms.users.success_create'));\n        return null;\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            if (array_key_exists('password', $data)) {\n                $data['password'] = Hash::make($data['password']);\n            }\n            $user = $this->__findOrFail($id);\n            $user->update($data);\n            return cms_response(trans('cms.users.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        User::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.users.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $user = User::find($id);\n        if ($user instanceof User) {\n            return $user;\n        }\n        throw new Exception(trans('cms.users.error_user_not_found'));\n    }\n}","originalFilePath":"\/var\/www\/html\/app\/Services\/CmsUserService.php","originalStartLine":18},"diff":"--- Original\n+++ New\n@@ @@\n         $data['token'] = Hash::make($data['email']);\n         $data['password'] = Hash::make($data['password']);\n         User::create($data);\n-        return cms_response(trans('cms.users.success_create'));\n+        cms_response(trans('cms.users.success_create'));\n+        return null;\n     }\n     public function update(int $id, array $data)\n     {","processOutput":"PHPUnit 9.5.25 #StandWithUkraine\n\nF\n\nTime: 00:00.420, Memory: 36.50 MB\n\nThere was 1 failure:\n\n1) Tests\\Feature\\Cms\\UsersTest::a_user_can_be_created\nnull does not match expected type \"array\".\n\n\/var\/www\/html\/vendor\/laravel\/framework\/src\/Illuminate\/Testing\/TestResponse.php:1183\n\/var\/www\/html\/tests\/Feature\/Cms\/UsersTest.php:43\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"FunctionCall","originalSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\User;\nuse Exception;\nuse Illuminate\\Support\\Facades\\Hash;\nuse App\\Interfaces\\CRUD;\nclass CmsUserService implements CRUD\n{\n    public function create(array $data)\n    {\n        $data['token'] = Hash::make($data['email']);\n        $data['password'] = Hash::make($data['password']);\n        User::create($data);\n        return cms_response(trans('cms.users.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            if (array_key_exists('password', $data)) {\n                $data['password'] = Hash::make($data['password']);\n            }\n            $user = $this->__findOrFail($id);\n            $user->update($data);\n            return cms_response(trans('cms.users.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        User::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.users.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $user = User::find($id);\n        if ($user instanceof User) {\n            return $user;\n        }\n        throw new Exception(trans('cms.users.error_user_not_found'));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\User;\nuse Exception;\nuse Illuminate\\Support\\Facades\\Hash;\nuse App\\Interfaces\\CRUD;\nclass CmsUserService implements CRUD\n{\n    public function create(array $data)\n    {\n        $data['token'] = Hash::make($data['email']);\n        $data['password'] = Hash::make($data['password']);\n        User::create($data);\n        return cms_response(trans('cms.users.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            if (array_key_exists('password', $data)) {\n                $data['password'] = Hash::make($data['password']);\n            }\n            $user = $this->__findOrFail($id);\n            $user->update($data);\n            cms_response(trans('cms.users.success_update'));\n            return null;\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        User::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.users.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $user = User::find($id);\n        if ($user instanceof User) {\n            return $user;\n        }\n        throw new Exception(trans('cms.users.error_user_not_found'));\n    }\n}","originalFilePath":"\/var\/www\/html\/app\/Services\/CmsUserService.php","originalStartLine":31},"diff":"--- Original\n+++ New\n@@ @@\n             }\n             $user = $this->__findOrFail($id);\n             $user->update($data);\n-            return cms_response(trans('cms.users.success_update'));\n+            cms_response(trans('cms.users.success_update'));\n+            return null;\n         } catch (\\Throwable $th) {\n             return cms_response($th->getMessage(), false, 400);\n         }","processOutput":"PHPUnit 9.5.25 #StandWithUkraine\n\nF\n\nTime: 00:00.437, Memory: 36.50 MB\n\nThere was 1 failure:\n\n1) Tests\\Feature\\Cms\\UsersTest::a_user_can_be_updated\nnull does not match expected type \"array\".\n\n\/var\/www\/html\/vendor\/laravel\/framework\/src\/Illuminate\/Testing\/TestResponse.php:1183\n\/var\/www\/html\/tests\/Feature\/Cms\/UsersTest.php:82\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"FalseValue","originalSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\User;\nuse Exception;\nuse Illuminate\\Support\\Facades\\Hash;\nuse App\\Interfaces\\CRUD;\nclass CmsUserService implements CRUD\n{\n    public function create(array $data)\n    {\n        $data['token'] = Hash::make($data['email']);\n        $data['password'] = Hash::make($data['password']);\n        User::create($data);\n        return cms_response(trans('cms.users.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            if (array_key_exists('password', $data)) {\n                $data['password'] = Hash::make($data['password']);\n            }\n            $user = $this->__findOrFail($id);\n            $user->update($data);\n            return cms_response(trans('cms.users.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        User::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.users.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $user = User::find($id);\n        if ($user instanceof User) {\n            return $user;\n        }\n        throw new Exception(trans('cms.users.error_user_not_found'));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\User;\nuse Exception;\nuse Illuminate\\Support\\Facades\\Hash;\nuse App\\Interfaces\\CRUD;\nclass CmsUserService implements CRUD\n{\n    public function create(array $data)\n    {\n        $data['token'] = Hash::make($data['email']);\n        $data['password'] = Hash::make($data['password']);\n        User::create($data);\n        return cms_response(trans('cms.users.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            if (array_key_exists('password', $data)) {\n                $data['password'] = Hash::make($data['password']);\n            }\n            $user = $this->__findOrFail($id);\n            $user->update($data);\n            return cms_response(trans('cms.users.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), true, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        User::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.users.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $user = User::find($id);\n        if ($user instanceof User) {\n            return $user;\n        }\n        throw new Exception(trans('cms.users.error_user_not_found'));\n    }\n}","originalFilePath":"\/var\/www\/html\/app\/Services\/CmsUserService.php","originalStartLine":33},"diff":"--- Original\n+++ New\n@@ @@\n             $user->update($data);\n             return cms_response(trans('cms.users.success_update'));\n         } catch (\\Throwable $th) {\n-            return cms_response($th->getMessage(), false, 400);\n+            return cms_response($th->getMessage(), true, 400);\n         }\n     }\n     public function delete(string $ids)","processOutput":"PHPUnit 9.5.25 #StandWithUkraine\n\nF\n\nTime: 00:00.465, Memory: 36.50 MB\n\nThere was 1 failure:\n\n1) Tests\\Feature\\Cms\\UsersTest::if_the_user_isnt_found_an_error_is_returned\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n     'data' => Array ()\n     'http_status' => 400\n     'msg' => 'cms.users.error_user_not_found'\n-    'success' => false\n+    'success' => true\n )\n\n\/var\/www\/html\/vendor\/laravel\/framework\/src\/Illuminate\/Testing\/TestResponse.php:1183\n\/var\/www\/html\/tests\/Feature\/Cms\/UsersTest.php:102\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"DecrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\User;\nuse Exception;\nuse Illuminate\\Support\\Facades\\Hash;\nuse App\\Interfaces\\CRUD;\nclass CmsUserService implements CRUD\n{\n    public function create(array $data)\n    {\n        $data['token'] = Hash::make($data['email']);\n        $data['password'] = Hash::make($data['password']);\n        User::create($data);\n        return cms_response(trans('cms.users.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            if (array_key_exists('password', $data)) {\n                $data['password'] = Hash::make($data['password']);\n            }\n            $user = $this->__findOrFail($id);\n            $user->update($data);\n            return cms_response(trans('cms.users.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        User::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.users.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $user = User::find($id);\n        if ($user instanceof User) {\n            return $user;\n        }\n        throw new Exception(trans('cms.users.error_user_not_found'));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\User;\nuse Exception;\nuse Illuminate\\Support\\Facades\\Hash;\nuse App\\Interfaces\\CRUD;\nclass CmsUserService implements CRUD\n{\n    public function create(array $data)\n    {\n        $data['token'] = Hash::make($data['email']);\n        $data['password'] = Hash::make($data['password']);\n        User::create($data);\n        return cms_response(trans('cms.users.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            if (array_key_exists('password', $data)) {\n                $data['password'] = Hash::make($data['password']);\n            }\n            $user = $this->__findOrFail($id);\n            $user->update($data);\n            return cms_response(trans('cms.users.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 399);\n        }\n    }\n    public function delete(string $ids)\n    {\n        User::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.users.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $user = User::find($id);\n        if ($user instanceof User) {\n            return $user;\n        }\n        throw new Exception(trans('cms.users.error_user_not_found'));\n    }\n}","originalFilePath":"\/var\/www\/html\/app\/Services\/CmsUserService.php","originalStartLine":33},"diff":"--- Original\n+++ New\n@@ @@\n             $user->update($data);\n             return cms_response(trans('cms.users.success_update'));\n         } catch (\\Throwable $th) {\n-            return cms_response($th->getMessage(), false, 400);\n+            return cms_response($th->getMessage(), false, 399);\n         }\n     }\n     public function delete(string $ids)","processOutput":"PHPUnit 9.5.25 #StandWithUkraine\n\nF\n\nTime: 00:00.453, Memory: 36.50 MB\n\nThere was 1 failure:\n\n1) Tests\\Feature\\Cms\\UsersTest::if_the_user_isnt_found_an_error_is_returned\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n Array (\n     'data' => Array ()\n-    'http_status' => 400\n+    'http_status' => 399\n     'msg' => 'cms.users.error_user_not_found'\n     'success' => false\n )\n\n\/var\/www\/html\/vendor\/laravel\/framework\/src\/Illuminate\/Testing\/TestResponse.php:1183\n\/var\/www\/html\/tests\/Feature\/Cms\/UsersTest.php:102\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"IncrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\User;\nuse Exception;\nuse Illuminate\\Support\\Facades\\Hash;\nuse App\\Interfaces\\CRUD;\nclass CmsUserService implements CRUD\n{\n    public function create(array $data)\n    {\n        $data['token'] = Hash::make($data['email']);\n        $data['password'] = Hash::make($data['password']);\n        User::create($data);\n        return cms_response(trans('cms.users.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            if (array_key_exists('password', $data)) {\n                $data['password'] = Hash::make($data['password']);\n            }\n            $user = $this->__findOrFail($id);\n            $user->update($data);\n            return cms_response(trans('cms.users.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        User::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.users.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $user = User::find($id);\n        if ($user instanceof User) {\n            return $user;\n        }\n        throw new Exception(trans('cms.users.error_user_not_found'));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\User;\nuse Exception;\nuse Illuminate\\Support\\Facades\\Hash;\nuse App\\Interfaces\\CRUD;\nclass CmsUserService implements CRUD\n{\n    public function create(array $data)\n    {\n        $data['token'] = Hash::make($data['email']);\n        $data['password'] = Hash::make($data['password']);\n        User::create($data);\n        return cms_response(trans('cms.users.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            if (array_key_exists('password', $data)) {\n                $data['password'] = Hash::make($data['password']);\n            }\n            $user = $this->__findOrFail($id);\n            $user->update($data);\n            return cms_response(trans('cms.users.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 401);\n        }\n    }\n    public function delete(string $ids)\n    {\n        User::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.users.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $user = User::find($id);\n        if ($user instanceof User) {\n            return $user;\n        }\n        throw new Exception(trans('cms.users.error_user_not_found'));\n    }\n}","originalFilePath":"\/var\/www\/html\/app\/Services\/CmsUserService.php","originalStartLine":33},"diff":"--- Original\n+++ New\n@@ @@\n             $user->update($data);\n             return cms_response(trans('cms.users.success_update'));\n         } catch (\\Throwable $th) {\n-            return cms_response($th->getMessage(), false, 400);\n+            return cms_response($th->getMessage(), false, 401);\n         }\n     }\n     public function delete(string $ids)","processOutput":"PHPUnit 9.5.25 #StandWithUkraine\n\nF\n\nTime: 00:00.386, Memory: 36.50 MB\n\nThere was 1 failure:\n\n1) Tests\\Feature\\Cms\\UsersTest::if_the_user_isnt_found_an_error_is_returned\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n Array (\n     'data' => Array ()\n-    'http_status' => 400\n+    'http_status' => 401\n     'msg' => 'cms.users.error_user_not_found'\n     'success' => false\n )\n\n\/var\/www\/html\/vendor\/laravel\/framework\/src\/Illuminate\/Testing\/TestResponse.php:1183\n\/var\/www\/html\/tests\/Feature\/Cms\/UsersTest.php:102\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"FunctionCall","originalSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\User;\nuse Exception;\nuse Illuminate\\Support\\Facades\\Hash;\nuse App\\Interfaces\\CRUD;\nclass CmsUserService implements CRUD\n{\n    public function create(array $data)\n    {\n        $data['token'] = Hash::make($data['email']);\n        $data['password'] = Hash::make($data['password']);\n        User::create($data);\n        return cms_response(trans('cms.users.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            if (array_key_exists('password', $data)) {\n                $data['password'] = Hash::make($data['password']);\n            }\n            $user = $this->__findOrFail($id);\n            $user->update($data);\n            return cms_response(trans('cms.users.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        User::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.users.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $user = User::find($id);\n        if ($user instanceof User) {\n            return $user;\n        }\n        throw new Exception(trans('cms.users.error_user_not_found'));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\User;\nuse Exception;\nuse Illuminate\\Support\\Facades\\Hash;\nuse App\\Interfaces\\CRUD;\nclass CmsUserService implements CRUD\n{\n    public function create(array $data)\n    {\n        $data['token'] = Hash::make($data['email']);\n        $data['password'] = Hash::make($data['password']);\n        User::create($data);\n        return cms_response(trans('cms.users.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            if (array_key_exists('password', $data)) {\n                $data['password'] = Hash::make($data['password']);\n            }\n            $user = $this->__findOrFail($id);\n            $user->update($data);\n            return cms_response(trans('cms.users.success_update'));\n        } catch (\\Throwable $th) {\n            cms_response($th->getMessage(), false, 400);\n            return null;\n        }\n    }\n    public function delete(string $ids)\n    {\n        User::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.users.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $user = User::find($id);\n        if ($user instanceof User) {\n            return $user;\n        }\n        throw new Exception(trans('cms.users.error_user_not_found'));\n    }\n}","originalFilePath":"\/var\/www\/html\/app\/Services\/CmsUserService.php","originalStartLine":33},"diff":"--- Original\n+++ New\n@@ @@\n             $user->update($data);\n             return cms_response(trans('cms.users.success_update'));\n         } catch (\\Throwable $th) {\n-            return cms_response($th->getMessage(), false, 400);\n+            cms_response($th->getMessage(), false, 400);\n+            return null;\n         }\n     }\n     public function delete(string $ids)","processOutput":"PHPUnit 9.5.25 #StandWithUkraine\n\nF\n\nTime: 00:00.428, Memory: 36.50 MB\n\nThere was 1 failure:\n\n1) Tests\\Feature\\Cms\\UsersTest::if_the_user_isnt_found_an_error_is_returned\nnull does not match expected type \"array\".\n\n\/var\/www\/html\/vendor\/laravel\/framework\/src\/Illuminate\/Testing\/TestResponse.php:1183\n\/var\/www\/html\/tests\/Feature\/Cms\/UsersTest.php:102\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"FunctionCall","originalSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\User;\nuse Exception;\nuse Illuminate\\Support\\Facades\\Hash;\nuse App\\Interfaces\\CRUD;\nclass CmsUserService implements CRUD\n{\n    public function create(array $data)\n    {\n        $data['token'] = Hash::make($data['email']);\n        $data['password'] = Hash::make($data['password']);\n        User::create($data);\n        return cms_response(trans('cms.users.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            if (array_key_exists('password', $data)) {\n                $data['password'] = Hash::make($data['password']);\n            }\n            $user = $this->__findOrFail($id);\n            $user->update($data);\n            return cms_response(trans('cms.users.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        User::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.users.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $user = User::find($id);\n        if ($user instanceof User) {\n            return $user;\n        }\n        throw new Exception(trans('cms.users.error_user_not_found'));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\User;\nuse Exception;\nuse Illuminate\\Support\\Facades\\Hash;\nuse App\\Interfaces\\CRUD;\nclass CmsUserService implements CRUD\n{\n    public function create(array $data)\n    {\n        $data['token'] = Hash::make($data['email']);\n        $data['password'] = Hash::make($data['password']);\n        User::create($data);\n        return cms_response(trans('cms.users.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            if (array_key_exists('password', $data)) {\n                $data['password'] = Hash::make($data['password']);\n            }\n            $user = $this->__findOrFail($id);\n            $user->update($data);\n            return cms_response(trans('cms.users.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        User::whereIn('id', json_decode($ids))->delete();\n        cms_response(trans('cms.users.success_delete'));\n        return null;\n    }\n    private function __findOrFail(int $id)\n    {\n        $user = User::find($id);\n        if ($user instanceof User) {\n            return $user;\n        }\n        throw new Exception(trans('cms.users.error_user_not_found'));\n    }\n}","originalFilePath":"\/var\/www\/html\/app\/Services\/CmsUserService.php","originalStartLine":40},"diff":"--- Original\n+++ New\n@@ @@\n     public function delete(string $ids)\n     {\n         User::whereIn('id', json_decode($ids))->delete();\n-        return cms_response(trans('cms.users.success_delete'));\n+        cms_response(trans('cms.users.success_delete'));\n+        return null;\n     }\n     private function __findOrFail(int $id)\n     {","processOutput":"PHPUnit 9.5.25 #StandWithUkraine\n\nF\n\nTime: 00:00.406, Memory: 36.50 MB\n\nThere was 1 failure:\n\n1) Tests\\Feature\\Cms\\UsersTest::users_can_be_excluded\nnull does not match expected type \"array\".\n\n\/var\/www\/html\/vendor\/laravel\/framework\/src\/Illuminate\/Testing\/TestResponse.php:1183\n\/var\/www\/html\/tests\/Feature\/Cms\/UsersTest.php:151\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"InstanceOf_","originalSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\User;\nuse Exception;\nuse Illuminate\\Support\\Facades\\Hash;\nuse App\\Interfaces\\CRUD;\nclass CmsUserService implements CRUD\n{\n    public function create(array $data)\n    {\n        $data['token'] = Hash::make($data['email']);\n        $data['password'] = Hash::make($data['password']);\n        User::create($data);\n        return cms_response(trans('cms.users.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            if (array_key_exists('password', $data)) {\n                $data['password'] = Hash::make($data['password']);\n            }\n            $user = $this->__findOrFail($id);\n            $user->update($data);\n            return cms_response(trans('cms.users.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        User::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.users.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $user = User::find($id);\n        if ($user instanceof User) {\n            return $user;\n        }\n        throw new Exception(trans('cms.users.error_user_not_found'));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\User;\nuse Exception;\nuse Illuminate\\Support\\Facades\\Hash;\nuse App\\Interfaces\\CRUD;\nclass CmsUserService implements CRUD\n{\n    public function create(array $data)\n    {\n        $data['token'] = Hash::make($data['email']);\n        $data['password'] = Hash::make($data['password']);\n        User::create($data);\n        return cms_response(trans('cms.users.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            if (array_key_exists('password', $data)) {\n                $data['password'] = Hash::make($data['password']);\n            }\n            $user = $this->__findOrFail($id);\n            $user->update($data);\n            return cms_response(trans('cms.users.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        User::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.users.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $user = User::find($id);\n        if (true) {\n            return $user;\n        }\n        throw new Exception(trans('cms.users.error_user_not_found'));\n    }\n}","originalFilePath":"\/var\/www\/html\/app\/Services\/CmsUserService.php","originalStartLine":46},"diff":"--- Original\n+++ New\n@@ @@\n     private function __findOrFail(int $id)\n     {\n         $user = User::find($id);\n-        if ($user instanceof User) {\n+        if (true) {\n             return $user;\n         }\n         throw new Exception(trans('cms.users.error_user_not_found'));\n     }\n }","processOutput":"PHPUnit 9.5.25 #StandWithUkraine\n\nF\n\nTime: 00:00.421, Memory: 36.50 MB\n\nThere was 1 failure:\n\n1) Tests\\Feature\\Cms\\UsersTest::if_the_user_isnt_found_an_error_is_returned\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n Array (\n     'data' => Array ()\n     'http_status' => 400\n-    'msg' => 'cms.users.error_user_not_found'\n+    'msg' => 'Call to a member function update() on null'\n     'success' => false\n )\n\n\/var\/www\/html\/vendor\/laravel\/framework\/src\/Illuminate\/Testing\/TestResponse.php:1183\n\/var\/www\/html\/tests\/Feature\/Cms\/UsersTest.php:102\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"InstanceOf_","originalSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\User;\nuse Exception;\nuse Illuminate\\Support\\Facades\\Hash;\nuse App\\Interfaces\\CRUD;\nclass CmsUserService implements CRUD\n{\n    public function create(array $data)\n    {\n        $data['token'] = Hash::make($data['email']);\n        $data['password'] = Hash::make($data['password']);\n        User::create($data);\n        return cms_response(trans('cms.users.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            if (array_key_exists('password', $data)) {\n                $data['password'] = Hash::make($data['password']);\n            }\n            $user = $this->__findOrFail($id);\n            $user->update($data);\n            return cms_response(trans('cms.users.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        User::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.users.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $user = User::find($id);\n        if ($user instanceof User) {\n            return $user;\n        }\n        throw new Exception(trans('cms.users.error_user_not_found'));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\User;\nuse Exception;\nuse Illuminate\\Support\\Facades\\Hash;\nuse App\\Interfaces\\CRUD;\nclass CmsUserService implements CRUD\n{\n    public function create(array $data)\n    {\n        $data['token'] = Hash::make($data['email']);\n        $data['password'] = Hash::make($data['password']);\n        User::create($data);\n        return cms_response(trans('cms.users.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            if (array_key_exists('password', $data)) {\n                $data['password'] = Hash::make($data['password']);\n            }\n            $user = $this->__findOrFail($id);\n            $user->update($data);\n            return cms_response(trans('cms.users.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        User::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.users.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $user = User::find($id);\n        if (false) {\n            return $user;\n        }\n        throw new Exception(trans('cms.users.error_user_not_found'));\n    }\n}","originalFilePath":"\/var\/www\/html\/app\/Services\/CmsUserService.php","originalStartLine":46},"diff":"--- Original\n+++ New\n@@ @@\n     private function __findOrFail(int $id)\n     {\n         $user = User::find($id);\n-        if ($user instanceof User) {\n+        if (false) {\n             return $user;\n         }\n         throw new Exception(trans('cms.users.error_user_not_found'));\n     }\n }","processOutput":"PHPUnit 9.5.25 #StandWithUkraine\n\nF\n\nTime: 00:00.395, Memory: 36.50 MB\n\nThere was 1 failure:\n\n1) Tests\\Feature\\Cms\\UsersTest::a_user_can_be_updated\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n Array (\n     'data' => Array ()\n-    'http_status' => 200\n-    'msg' => 'cms.users.success_update'\n-    'success' => true\n+    'http_status' => 400\n+    'msg' => 'cms.users.error_user_not_found'\n+    'success' => false\n )\n\n\/var\/www\/html\/vendor\/laravel\/framework\/src\/Illuminate\/Testing\/TestResponse.php:1183\n\/var\/www\/html\/tests\/Feature\/Cms\/UsersTest.php:82\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"Throw_","originalSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\User;\nuse Exception;\nuse Illuminate\\Support\\Facades\\Hash;\nuse App\\Interfaces\\CRUD;\nclass CmsUserService implements CRUD\n{\n    public function create(array $data)\n    {\n        $data['token'] = Hash::make($data['email']);\n        $data['password'] = Hash::make($data['password']);\n        User::create($data);\n        return cms_response(trans('cms.users.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            if (array_key_exists('password', $data)) {\n                $data['password'] = Hash::make($data['password']);\n            }\n            $user = $this->__findOrFail($id);\n            $user->update($data);\n            return cms_response(trans('cms.users.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        User::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.users.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $user = User::find($id);\n        if ($user instanceof User) {\n            return $user;\n        }\n        throw new Exception(trans('cms.users.error_user_not_found'));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\User;\nuse Exception;\nuse Illuminate\\Support\\Facades\\Hash;\nuse App\\Interfaces\\CRUD;\nclass CmsUserService implements CRUD\n{\n    public function create(array $data)\n    {\n        $data['token'] = Hash::make($data['email']);\n        $data['password'] = Hash::make($data['password']);\n        User::create($data);\n        return cms_response(trans('cms.users.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            if (array_key_exists('password', $data)) {\n                $data['password'] = Hash::make($data['password']);\n            }\n            $user = $this->__findOrFail($id);\n            $user->update($data);\n            return cms_response(trans('cms.users.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        User::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.users.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $user = User::find($id);\n        if ($user instanceof User) {\n            return $user;\n        }\n        new Exception(trans('cms.users.error_user_not_found'));\n    }\n}","originalFilePath":"\/var\/www\/html\/app\/Services\/CmsUserService.php","originalStartLine":49},"diff":"--- Original\n+++ New\n@@ @@\n         if ($user instanceof User) {\n             return $user;\n         }\n-        throw new Exception(trans('cms.users.error_user_not_found'));\n+        new Exception(trans('cms.users.error_user_not_found'));\n     }\n }","processOutput":"PHPUnit 9.5.25 #StandWithUkraine\n\nF\n\nTime: 00:00.433, Memory: 36.50 MB\n\nThere was 1 failure:\n\n1) Tests\\Feature\\Cms\\UsersTest::if_the_user_isnt_found_an_error_is_returned\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n Array (\n     'data' => Array ()\n     'http_status' => 400\n-    'msg' => 'cms.users.error_user_not_found'\n+    'msg' => 'Call to a member function update() on null'\n     'success' => false\n )\n\n\/var\/www\/html\/vendor\/laravel\/framework\/src\/Illuminate\/Testing\/TestResponse.php:1183\n\/var\/www\/html\/tests\/Feature\/Cms\/UsersTest.php:102\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"FunctionCall","originalSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\Event;\nuse App\\Interfaces\\CRUD;\nuse Exception;\nclass EventService implements CRUD\n{\n    public function create(array $data)\n    {\n        Event::create($data);\n        return cms_response(trans('cms.events.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            $event = $this->__findOrFail($id);\n            $event->update($data);\n            return cms_response(trans('cms.events.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        Event::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.events.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $event = Event::find($id);\n        if ($event instanceof Event) {\n            return $event;\n        }\n        throw new Exception(trans('cms.events.error_not_found'));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\Event;\nuse App\\Interfaces\\CRUD;\nuse Exception;\nclass EventService implements CRUD\n{\n    public function create(array $data)\n    {\n        Event::create($data);\n        cms_response(trans('cms.events.success_create'));\n        return null;\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            $event = $this->__findOrFail($id);\n            $event->update($data);\n            return cms_response(trans('cms.events.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        Event::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.events.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $event = Event::find($id);\n        if ($event instanceof Event) {\n            return $event;\n        }\n        throw new Exception(trans('cms.events.error_not_found'));\n    }\n}","originalFilePath":"\/var\/www\/html\/app\/Services\/EventService.php","originalStartLine":15},"diff":"--- Original\n+++ New\n@@ @@\n     public function create(array $data)\n     {\n         Event::create($data);\n-        return cms_response(trans('cms.events.success_create'));\n+        cms_response(trans('cms.events.success_create'));\n+        return null;\n     }\n     public function update(int $id, array $data)\n     {","processOutput":"PHPUnit 9.5.25 #StandWithUkraine\n\nF\n\nTime: 00:00.408, Memory: 36.50 MB\n\nThere was 1 failure:\n\n1) Tests\\Feature\\Cms\\EventTest::an_event_can_be_created\nnull does not match expected type \"array\".\n\n\/var\/www\/html\/vendor\/laravel\/framework\/src\/Illuminate\/Testing\/TestResponse.php:1183\n\/var\/www\/html\/tests\/Feature\/Cms\/EventTest.php:39\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"FunctionCall","originalSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\Event;\nuse App\\Interfaces\\CRUD;\nuse Exception;\nclass EventService implements CRUD\n{\n    public function create(array $data)\n    {\n        Event::create($data);\n        return cms_response(trans('cms.events.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            $event = $this->__findOrFail($id);\n            $event->update($data);\n            return cms_response(trans('cms.events.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        Event::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.events.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $event = Event::find($id);\n        if ($event instanceof Event) {\n            return $event;\n        }\n        throw new Exception(trans('cms.events.error_not_found'));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\Event;\nuse App\\Interfaces\\CRUD;\nuse Exception;\nclass EventService implements CRUD\n{\n    public function create(array $data)\n    {\n        Event::create($data);\n        return cms_response(trans('cms.events.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            $event = $this->__findOrFail($id);\n            $event->update($data);\n            cms_response(trans('cms.events.success_update'));\n            return null;\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        Event::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.events.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $event = Event::find($id);\n        if ($event instanceof Event) {\n            return $event;\n        }\n        throw new Exception(trans('cms.events.error_not_found'));\n    }\n}","originalFilePath":"\/var\/www\/html\/app\/Services\/EventService.php","originalStartLine":24},"diff":"--- Original\n+++ New\n@@ @@\n         try {\n             $event = $this->__findOrFail($id);\n             $event->update($data);\n-            return cms_response(trans('cms.events.success_update'));\n+            cms_response(trans('cms.events.success_update'));\n+            return null;\n         } catch (\\Throwable $th) {\n             return cms_response($th->getMessage(), false, 400);\n         }","processOutput":"PHPUnit 9.5.25 #StandWithUkraine\n\nF\n\nTime: 00:00.407, Memory: 36.50 MB\n\nThere was 1 failure:\n\n1) Tests\\Feature\\Cms\\EventTest::an_event_can_be_updated\nnull does not match expected type \"array\".\n\n\/var\/www\/html\/vendor\/laravel\/framework\/src\/Illuminate\/Testing\/TestResponse.php:1183\n\/var\/www\/html\/tests\/Feature\/Cms\/EventTest.php:92\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"FalseValue","originalSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\Event;\nuse App\\Interfaces\\CRUD;\nuse Exception;\nclass EventService implements CRUD\n{\n    public function create(array $data)\n    {\n        Event::create($data);\n        return cms_response(trans('cms.events.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            $event = $this->__findOrFail($id);\n            $event->update($data);\n            return cms_response(trans('cms.events.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        Event::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.events.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $event = Event::find($id);\n        if ($event instanceof Event) {\n            return $event;\n        }\n        throw new Exception(trans('cms.events.error_not_found'));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\Event;\nuse App\\Interfaces\\CRUD;\nuse Exception;\nclass EventService implements CRUD\n{\n    public function create(array $data)\n    {\n        Event::create($data);\n        return cms_response(trans('cms.events.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            $event = $this->__findOrFail($id);\n            $event->update($data);\n            return cms_response(trans('cms.events.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), true, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        Event::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.events.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $event = Event::find($id);\n        if ($event instanceof Event) {\n            return $event;\n        }\n        throw new Exception(trans('cms.events.error_not_found'));\n    }\n}","originalFilePath":"\/var\/www\/html\/app\/Services\/EventService.php","originalStartLine":26},"diff":"--- Original\n+++ New\n@@ @@\n             $event->update($data);\n             return cms_response(trans('cms.events.success_update'));\n         } catch (\\Throwable $th) {\n-            return cms_response($th->getMessage(), false, 400);\n+            return cms_response($th->getMessage(), true, 400);\n         }\n     }\n     public function delete(string $ids)","processOutput":"PHPUnit 9.5.25 #StandWithUkraine\n\nF\n\nTime: 00:00.407, Memory: 36.50 MB\n\nThere was 1 failure:\n\n1) Tests\\Feature\\Cms\\EventTest::when_updating_an_event_if_not_found_an_error_is_returned\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n     'data' => Array ()\n     'http_status' => 400\n     'msg' => 'cms.events.error_not_found'\n-    'success' => false\n+    'success' => true\n )\n\n\/var\/www\/html\/vendor\/laravel\/framework\/src\/Illuminate\/Testing\/TestResponse.php:1183\n\/var\/www\/html\/tests\/Feature\/Cms\/EventTest.php:129\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"DecrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\Event;\nuse App\\Interfaces\\CRUD;\nuse Exception;\nclass EventService implements CRUD\n{\n    public function create(array $data)\n    {\n        Event::create($data);\n        return cms_response(trans('cms.events.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            $event = $this->__findOrFail($id);\n            $event->update($data);\n            return cms_response(trans('cms.events.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        Event::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.events.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $event = Event::find($id);\n        if ($event instanceof Event) {\n            return $event;\n        }\n        throw new Exception(trans('cms.events.error_not_found'));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\Event;\nuse App\\Interfaces\\CRUD;\nuse Exception;\nclass EventService implements CRUD\n{\n    public function create(array $data)\n    {\n        Event::create($data);\n        return cms_response(trans('cms.events.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            $event = $this->__findOrFail($id);\n            $event->update($data);\n            return cms_response(trans('cms.events.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 399);\n        }\n    }\n    public function delete(string $ids)\n    {\n        Event::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.events.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $event = Event::find($id);\n        if ($event instanceof Event) {\n            return $event;\n        }\n        throw new Exception(trans('cms.events.error_not_found'));\n    }\n}","originalFilePath":"\/var\/www\/html\/app\/Services\/EventService.php","originalStartLine":26},"diff":"--- Original\n+++ New\n@@ @@\n             $event->update($data);\n             return cms_response(trans('cms.events.success_update'));\n         } catch (\\Throwable $th) {\n-            return cms_response($th->getMessage(), false, 400);\n+            return cms_response($th->getMessage(), false, 399);\n         }\n     }\n     public function delete(string $ids)","processOutput":"PHPUnit 9.5.25 #StandWithUkraine\n\nF\n\nTime: 00:00.395, Memory: 36.50 MB\n\nThere was 1 failure:\n\n1) Tests\\Feature\\Cms\\EventTest::when_updating_an_event_if_not_found_an_error_is_returned\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n Array (\n     'data' => Array ()\n-    'http_status' => 400\n+    'http_status' => 399\n     'msg' => 'cms.events.error_not_found'\n     'success' => false\n )\n\n\/var\/www\/html\/vendor\/laravel\/framework\/src\/Illuminate\/Testing\/TestResponse.php:1183\n\/var\/www\/html\/tests\/Feature\/Cms\/EventTest.php:129\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"IncrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\Event;\nuse App\\Interfaces\\CRUD;\nuse Exception;\nclass EventService implements CRUD\n{\n    public function create(array $data)\n    {\n        Event::create($data);\n        return cms_response(trans('cms.events.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            $event = $this->__findOrFail($id);\n            $event->update($data);\n            return cms_response(trans('cms.events.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        Event::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.events.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $event = Event::find($id);\n        if ($event instanceof Event) {\n            return $event;\n        }\n        throw new Exception(trans('cms.events.error_not_found'));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\Event;\nuse App\\Interfaces\\CRUD;\nuse Exception;\nclass EventService implements CRUD\n{\n    public function create(array $data)\n    {\n        Event::create($data);\n        return cms_response(trans('cms.events.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            $event = $this->__findOrFail($id);\n            $event->update($data);\n            return cms_response(trans('cms.events.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 401);\n        }\n    }\n    public function delete(string $ids)\n    {\n        Event::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.events.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $event = Event::find($id);\n        if ($event instanceof Event) {\n            return $event;\n        }\n        throw new Exception(trans('cms.events.error_not_found'));\n    }\n}","originalFilePath":"\/var\/www\/html\/app\/Services\/EventService.php","originalStartLine":26},"diff":"--- Original\n+++ New\n@@ @@\n             $event->update($data);\n             return cms_response(trans('cms.events.success_update'));\n         } catch (\\Throwable $th) {\n-            return cms_response($th->getMessage(), false, 400);\n+            return cms_response($th->getMessage(), false, 401);\n         }\n     }\n     public function delete(string $ids)","processOutput":"PHPUnit 9.5.25 #StandWithUkraine\n\nF\n\nTime: 00:00.438, Memory: 36.50 MB\n\nThere was 1 failure:\n\n1) Tests\\Feature\\Cms\\EventTest::when_updating_an_event_if_not_found_an_error_is_returned\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n Array (\n     'data' => Array ()\n-    'http_status' => 400\n+    'http_status' => 401\n     'msg' => 'cms.events.error_not_found'\n     'success' => false\n )\n\n\/var\/www\/html\/vendor\/laravel\/framework\/src\/Illuminate\/Testing\/TestResponse.php:1183\n\/var\/www\/html\/tests\/Feature\/Cms\/EventTest.php:129\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"FunctionCall","originalSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\Event;\nuse App\\Interfaces\\CRUD;\nuse Exception;\nclass EventService implements CRUD\n{\n    public function create(array $data)\n    {\n        Event::create($data);\n        return cms_response(trans('cms.events.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            $event = $this->__findOrFail($id);\n            $event->update($data);\n            return cms_response(trans('cms.events.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        Event::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.events.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $event = Event::find($id);\n        if ($event instanceof Event) {\n            return $event;\n        }\n        throw new Exception(trans('cms.events.error_not_found'));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\Event;\nuse App\\Interfaces\\CRUD;\nuse Exception;\nclass EventService implements CRUD\n{\n    public function create(array $data)\n    {\n        Event::create($data);\n        return cms_response(trans('cms.events.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            $event = $this->__findOrFail($id);\n            $event->update($data);\n            return cms_response(trans('cms.events.success_update'));\n        } catch (\\Throwable $th) {\n            cms_response($th->getMessage(), false, 400);\n            return null;\n        }\n    }\n    public function delete(string $ids)\n    {\n        Event::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.events.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $event = Event::find($id);\n        if ($event instanceof Event) {\n            return $event;\n        }\n        throw new Exception(trans('cms.events.error_not_found'));\n    }\n}","originalFilePath":"\/var\/www\/html\/app\/Services\/EventService.php","originalStartLine":26},"diff":"--- Original\n+++ New\n@@ @@\n             $event->update($data);\n             return cms_response(trans('cms.events.success_update'));\n         } catch (\\Throwable $th) {\n-            return cms_response($th->getMessage(), false, 400);\n+            cms_response($th->getMessage(), false, 400);\n+            return null;\n         }\n     }\n     public function delete(string $ids)","processOutput":"PHPUnit 9.5.25 #StandWithUkraine\n\nF\n\nTime: 00:00.411, Memory: 36.50 MB\n\nThere was 1 failure:\n\n1) Tests\\Feature\\Cms\\EventTest::when_updating_an_event_if_not_found_an_error_is_returned\nnull does not match expected type \"array\".\n\n\/var\/www\/html\/vendor\/laravel\/framework\/src\/Illuminate\/Testing\/TestResponse.php:1183\n\/var\/www\/html\/tests\/Feature\/Cms\/EventTest.php:129\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"FunctionCall","originalSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\Event;\nuse App\\Interfaces\\CRUD;\nuse Exception;\nclass EventService implements CRUD\n{\n    public function create(array $data)\n    {\n        Event::create($data);\n        return cms_response(trans('cms.events.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            $event = $this->__findOrFail($id);\n            $event->update($data);\n            return cms_response(trans('cms.events.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        Event::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.events.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $event = Event::find($id);\n        if ($event instanceof Event) {\n            return $event;\n        }\n        throw new Exception(trans('cms.events.error_not_found'));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\Event;\nuse App\\Interfaces\\CRUD;\nuse Exception;\nclass EventService implements CRUD\n{\n    public function create(array $data)\n    {\n        Event::create($data);\n        return cms_response(trans('cms.events.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            $event = $this->__findOrFail($id);\n            $event->update($data);\n            return cms_response(trans('cms.events.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        Event::whereIn('id', json_decode($ids))->delete();\n        cms_response(trans('cms.events.success_delete'));\n        return null;\n    }\n    private function __findOrFail(int $id)\n    {\n        $event = Event::find($id);\n        if ($event instanceof Event) {\n            return $event;\n        }\n        throw new Exception(trans('cms.events.error_not_found'));\n    }\n}","originalFilePath":"\/var\/www\/html\/app\/Services\/EventService.php","originalStartLine":33},"diff":"--- Original\n+++ New\n@@ @@\n     public function delete(string $ids)\n     {\n         Event::whereIn('id', json_decode($ids))->delete();\n-        return cms_response(trans('cms.events.success_delete'));\n+        cms_response(trans('cms.events.success_delete'));\n+        return null;\n     }\n     private function __findOrFail(int $id)\n     {","processOutput":"PHPUnit 9.5.25 #StandWithUkraine\n\nF\n\nTime: 00:00.394, Memory: 36.50 MB\n\nThere was 1 failure:\n\n1) Tests\\Feature\\Cms\\EventTest::events_can_be_excluded\nnull does not match expected type \"array\".\n\n\/var\/www\/html\/vendor\/laravel\/framework\/src\/Illuminate\/Testing\/TestResponse.php:1183\n\/var\/www\/html\/tests\/Feature\/Cms\/EventTest.php:141\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"InstanceOf_","originalSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\Event;\nuse App\\Interfaces\\CRUD;\nuse Exception;\nclass EventService implements CRUD\n{\n    public function create(array $data)\n    {\n        Event::create($data);\n        return cms_response(trans('cms.events.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            $event = $this->__findOrFail($id);\n            $event->update($data);\n            return cms_response(trans('cms.events.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        Event::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.events.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $event = Event::find($id);\n        if ($event instanceof Event) {\n            return $event;\n        }\n        throw new Exception(trans('cms.events.error_not_found'));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\Event;\nuse App\\Interfaces\\CRUD;\nuse Exception;\nclass EventService implements CRUD\n{\n    public function create(array $data)\n    {\n        Event::create($data);\n        return cms_response(trans('cms.events.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            $event = $this->__findOrFail($id);\n            $event->update($data);\n            return cms_response(trans('cms.events.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        Event::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.events.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $event = Event::find($id);\n        if (true) {\n            return $event;\n        }\n        throw new Exception(trans('cms.events.error_not_found'));\n    }\n}","originalFilePath":"\/var\/www\/html\/app\/Services\/EventService.php","originalStartLine":39},"diff":"--- Original\n+++ New\n@@ @@\n     private function __findOrFail(int $id)\n     {\n         $event = Event::find($id);\n-        if ($event instanceof Event) {\n+        if (true) {\n             return $event;\n         }\n         throw new Exception(trans('cms.events.error_not_found'));\n     }\n }","processOutput":"PHPUnit 9.5.25 #StandWithUkraine\n\nF\n\nTime: 00:00.391, Memory: 36.50 MB\n\nThere was 1 failure:\n\n1) Tests\\Feature\\Cms\\EventTest::when_updating_an_event_if_not_found_an_error_is_returned\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n Array (\n     'data' => Array ()\n     'http_status' => 400\n-    'msg' => 'cms.events.error_not_found'\n+    'msg' => 'Call to a member function update() on null'\n     'success' => false\n )\n\n\/var\/www\/html\/vendor\/laravel\/framework\/src\/Illuminate\/Testing\/TestResponse.php:1183\n\/var\/www\/html\/tests\/Feature\/Cms\/EventTest.php:129\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"InstanceOf_","originalSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\Event;\nuse App\\Interfaces\\CRUD;\nuse Exception;\nclass EventService implements CRUD\n{\n    public function create(array $data)\n    {\n        Event::create($data);\n        return cms_response(trans('cms.events.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            $event = $this->__findOrFail($id);\n            $event->update($data);\n            return cms_response(trans('cms.events.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        Event::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.events.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $event = Event::find($id);\n        if ($event instanceof Event) {\n            return $event;\n        }\n        throw new Exception(trans('cms.events.error_not_found'));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\Event;\nuse App\\Interfaces\\CRUD;\nuse Exception;\nclass EventService implements CRUD\n{\n    public function create(array $data)\n    {\n        Event::create($data);\n        return cms_response(trans('cms.events.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            $event = $this->__findOrFail($id);\n            $event->update($data);\n            return cms_response(trans('cms.events.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        Event::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.events.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $event = Event::find($id);\n        if (false) {\n            return $event;\n        }\n        throw new Exception(trans('cms.events.error_not_found'));\n    }\n}","originalFilePath":"\/var\/www\/html\/app\/Services\/EventService.php","originalStartLine":39},"diff":"--- Original\n+++ New\n@@ @@\n     private function __findOrFail(int $id)\n     {\n         $event = Event::find($id);\n-        if ($event instanceof Event) {\n+        if (false) {\n             return $event;\n         }\n         throw new Exception(trans('cms.events.error_not_found'));\n     }\n }","processOutput":"PHPUnit 9.5.25 #StandWithUkraine\n\nF\n\nTime: 00:00.419, Memory: 36.50 MB\n\nThere was 1 failure:\n\n1) Tests\\Feature\\Cms\\EventTest::an_event_can_be_updated\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n Array (\n     'data' => Array ()\n-    'http_status' => 200\n-    'msg' => 'cms.events.success_update'\n-    'success' => true\n+    'http_status' => 400\n+    'msg' => 'cms.events.error_not_found'\n+    'success' => false\n )\n\n\/var\/www\/html\/vendor\/laravel\/framework\/src\/Illuminate\/Testing\/TestResponse.php:1183\n\/var\/www\/html\/tests\/Feature\/Cms\/EventTest.php:92\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"Throw_","originalSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\Event;\nuse App\\Interfaces\\CRUD;\nuse Exception;\nclass EventService implements CRUD\n{\n    public function create(array $data)\n    {\n        Event::create($data);\n        return cms_response(trans('cms.events.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            $event = $this->__findOrFail($id);\n            $event->update($data);\n            return cms_response(trans('cms.events.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        Event::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.events.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $event = Event::find($id);\n        if ($event instanceof Event) {\n            return $event;\n        }\n        throw new Exception(trans('cms.events.error_not_found'));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\Event;\nuse App\\Interfaces\\CRUD;\nuse Exception;\nclass EventService implements CRUD\n{\n    public function create(array $data)\n    {\n        Event::create($data);\n        return cms_response(trans('cms.events.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            $event = $this->__findOrFail($id);\n            $event->update($data);\n            return cms_response(trans('cms.events.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        Event::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.events.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $event = Event::find($id);\n        if ($event instanceof Event) {\n            return $event;\n        }\n        new Exception(trans('cms.events.error_not_found'));\n    }\n}","originalFilePath":"\/var\/www\/html\/app\/Services\/EventService.php","originalStartLine":42},"diff":"--- Original\n+++ New\n@@ @@\n         if ($event instanceof Event) {\n             return $event;\n         }\n-        throw new Exception(trans('cms.events.error_not_found'));\n+        new Exception(trans('cms.events.error_not_found'));\n     }\n }","processOutput":"PHPUnit 9.5.25 #StandWithUkraine\n\nF\n\nTime: 00:00.408, Memory: 36.50 MB\n\nThere was 1 failure:\n\n1) Tests\\Feature\\Cms\\EventTest::when_updating_an_event_if_not_found_an_error_is_returned\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n Array (\n     'data' => Array ()\n     'http_status' => 400\n-    'msg' => 'cms.events.error_not_found'\n+    'msg' => 'Call to a member function update() on null'\n     'success' => false\n )\n\n\/var\/www\/html\/vendor\/laravel\/framework\/src\/Illuminate\/Testing\/TestResponse.php:1183\n\/var\/www\/html\/tests\/Feature\/Cms\/EventTest.php:129\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"FunctionCall","originalSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\Group;\nuse App\\Interfaces\\CRUD;\nuse Exception;\nclass GroupService implements CRUD\n{\n    public function listAll()\n    {\n        return Group::all();\n    }\n    public function create(array $data)\n    {\n        $modules_id = array_pop($data);\n        $group = Group::create($data);\n        $group->modules()->attach($modules_id);\n        return cms_response(trans('cms.groups.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            $modules_ids = $data['modules'];\n            unset($data['modules']);\n            $group = $this->__findOrFail($id);\n            $group->update($data);\n            $group->modules()->sync($modules_ids);\n            return cms_response(trans('cms.groups.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        Group::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.groups.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $group = Group::find($id);\n        if ($group instanceof Group) {\n            return $group;\n        }\n        throw new Exception(trans('cms.groups.error_not_found'));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\Group;\nuse App\\Interfaces\\CRUD;\nuse Exception;\nclass GroupService implements CRUD\n{\n    public function listAll()\n    {\n        return Group::all();\n    }\n    public function create(array $data)\n    {\n        $modules_id = array_pop($data);\n        $group = Group::create($data);\n        $group->modules()->attach($modules_id);\n        cms_response(trans('cms.groups.success_create'));\n        return null;\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            $modules_ids = $data['modules'];\n            unset($data['modules']);\n            $group = $this->__findOrFail($id);\n            $group->update($data);\n            $group->modules()->sync($modules_ids);\n            return cms_response(trans('cms.groups.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        Group::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.groups.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $group = Group::find($id);\n        if ($group instanceof Group) {\n            return $group;\n        }\n        throw new Exception(trans('cms.groups.error_not_found'));\n    }\n}","originalFilePath":"\/var\/www\/html\/app\/Services\/GroupService.php","originalStartLine":23},"diff":"--- Original\n+++ New\n@@ @@\n         $modules_id = array_pop($data);\n         $group = Group::create($data);\n         $group->modules()->attach($modules_id);\n-        return cms_response(trans('cms.groups.success_create'));\n+        cms_response(trans('cms.groups.success_create'));\n+        return null;\n     }\n     public function update(int $id, array $data)\n     {","processOutput":"PHPUnit 9.5.25 #StandWithUkraine\n\nF\n\nTime: 00:00.422, Memory: 36.50 MB\n\nThere was 1 failure:\n\n1) Tests\\Feature\\Cms\\GroupsTest::a_group_can_be_created\nnull does not match expected type \"array\".\n\n\/var\/www\/html\/vendor\/laravel\/framework\/src\/Illuminate\/Testing\/TestResponse.php:1183\n\/var\/www\/html\/tests\/Feature\/Cms\/GroupsTest.php:49\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"FunctionCall","originalSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\Group;\nuse App\\Interfaces\\CRUD;\nuse Exception;\nclass GroupService implements CRUD\n{\n    public function listAll()\n    {\n        return Group::all();\n    }\n    public function create(array $data)\n    {\n        $modules_id = array_pop($data);\n        $group = Group::create($data);\n        $group->modules()->attach($modules_id);\n        return cms_response(trans('cms.groups.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            $modules_ids = $data['modules'];\n            unset($data['modules']);\n            $group = $this->__findOrFail($id);\n            $group->update($data);\n            $group->modules()->sync($modules_ids);\n            return cms_response(trans('cms.groups.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        Group::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.groups.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $group = Group::find($id);\n        if ($group instanceof Group) {\n            return $group;\n        }\n        throw new Exception(trans('cms.groups.error_not_found'));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\Group;\nuse App\\Interfaces\\CRUD;\nuse Exception;\nclass GroupService implements CRUD\n{\n    public function listAll()\n    {\n        return Group::all();\n    }\n    public function create(array $data)\n    {\n        $modules_id = array_pop($data);\n        $group = Group::create($data);\n        $group->modules()->attach($modules_id);\n        return cms_response(trans('cms.groups.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            $modules_ids = $data['modules'];\n            unset($data['modules']);\n            $group = $this->__findOrFail($id);\n            $group->update($data);\n            $group->modules()->sync($modules_ids);\n            cms_response(trans('cms.groups.success_update'));\n            return null;\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        Group::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.groups.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $group = Group::find($id);\n        if ($group instanceof Group) {\n            return $group;\n        }\n        throw new Exception(trans('cms.groups.error_not_found'));\n    }\n}","originalFilePath":"\/var\/www\/html\/app\/Services\/GroupService.php","originalStartLine":36},"diff":"--- Original\n+++ New\n@@ @@\n             $group = $this->__findOrFail($id);\n             $group->update($data);\n             $group->modules()->sync($modules_ids);\n-            return cms_response(trans('cms.groups.success_update'));\n+            cms_response(trans('cms.groups.success_update'));\n+            return null;\n         } catch (\\Throwable $th) {\n             return cms_response($th->getMessage(), false, 400);\n         }","processOutput":"PHPUnit 9.5.25 #StandWithUkraine\n\nF\n\nTime: 00:00.424, Memory: 36.50 MB\n\nThere was 1 failure:\n\n1) Tests\\Feature\\Cms\\GroupsTest::a_group_can_be_updated\nnull does not match expected type \"array\".\n\n\/var\/www\/html\/vendor\/laravel\/framework\/src\/Illuminate\/Testing\/TestResponse.php:1183\n\/var\/www\/html\/tests\/Feature\/Cms\/GroupsTest.php:84\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"FalseValue","originalSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\Group;\nuse App\\Interfaces\\CRUD;\nuse Exception;\nclass GroupService implements CRUD\n{\n    public function listAll()\n    {\n        return Group::all();\n    }\n    public function create(array $data)\n    {\n        $modules_id = array_pop($data);\n        $group = Group::create($data);\n        $group->modules()->attach($modules_id);\n        return cms_response(trans('cms.groups.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            $modules_ids = $data['modules'];\n            unset($data['modules']);\n            $group = $this->__findOrFail($id);\n            $group->update($data);\n            $group->modules()->sync($modules_ids);\n            return cms_response(trans('cms.groups.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        Group::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.groups.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $group = Group::find($id);\n        if ($group instanceof Group) {\n            return $group;\n        }\n        throw new Exception(trans('cms.groups.error_not_found'));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\Group;\nuse App\\Interfaces\\CRUD;\nuse Exception;\nclass GroupService implements CRUD\n{\n    public function listAll()\n    {\n        return Group::all();\n    }\n    public function create(array $data)\n    {\n        $modules_id = array_pop($data);\n        $group = Group::create($data);\n        $group->modules()->attach($modules_id);\n        return cms_response(trans('cms.groups.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            $modules_ids = $data['modules'];\n            unset($data['modules']);\n            $group = $this->__findOrFail($id);\n            $group->update($data);\n            $group->modules()->sync($modules_ids);\n            return cms_response(trans('cms.groups.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), true, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        Group::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.groups.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $group = Group::find($id);\n        if ($group instanceof Group) {\n            return $group;\n        }\n        throw new Exception(trans('cms.groups.error_not_found'));\n    }\n}","originalFilePath":"\/var\/www\/html\/app\/Services\/GroupService.php","originalStartLine":38},"diff":"--- Original\n+++ New\n@@ @@\n             $group->modules()->sync($modules_ids);\n             return cms_response(trans('cms.groups.success_update'));\n         } catch (\\Throwable $th) {\n-            return cms_response($th->getMessage(), false, 400);\n+            return cms_response($th->getMessage(), true, 400);\n         }\n     }\n     public function delete(string $ids)","processOutput":"PHPUnit 9.5.25 #StandWithUkraine\n\nF\n\nTime: 00:00.422, Memory: 36.50 MB\n\nThere was 1 failure:\n\n1) Tests\\Feature\\Cms\\GroupsTest::when_updating_a_group_if_it_snt_found_an_error_is_returned\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n     'data' => Array ()\n     'http_status' => 400\n     'msg' => 'cms.groups.error_not_found'\n-    'success' => false\n+    'success' => true\n )\n\n\/var\/www\/html\/vendor\/laravel\/framework\/src\/Illuminate\/Testing\/TestResponse.php:1183\n\/var\/www\/html\/tests\/Feature\/Cms\/GroupsTest.php:101\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"DecrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\Group;\nuse App\\Interfaces\\CRUD;\nuse Exception;\nclass GroupService implements CRUD\n{\n    public function listAll()\n    {\n        return Group::all();\n    }\n    public function create(array $data)\n    {\n        $modules_id = array_pop($data);\n        $group = Group::create($data);\n        $group->modules()->attach($modules_id);\n        return cms_response(trans('cms.groups.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            $modules_ids = $data['modules'];\n            unset($data['modules']);\n            $group = $this->__findOrFail($id);\n            $group->update($data);\n            $group->modules()->sync($modules_ids);\n            return cms_response(trans('cms.groups.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        Group::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.groups.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $group = Group::find($id);\n        if ($group instanceof Group) {\n            return $group;\n        }\n        throw new Exception(trans('cms.groups.error_not_found'));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\Group;\nuse App\\Interfaces\\CRUD;\nuse Exception;\nclass GroupService implements CRUD\n{\n    public function listAll()\n    {\n        return Group::all();\n    }\n    public function create(array $data)\n    {\n        $modules_id = array_pop($data);\n        $group = Group::create($data);\n        $group->modules()->attach($modules_id);\n        return cms_response(trans('cms.groups.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            $modules_ids = $data['modules'];\n            unset($data['modules']);\n            $group = $this->__findOrFail($id);\n            $group->update($data);\n            $group->modules()->sync($modules_ids);\n            return cms_response(trans('cms.groups.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 399);\n        }\n    }\n    public function delete(string $ids)\n    {\n        Group::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.groups.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $group = Group::find($id);\n        if ($group instanceof Group) {\n            return $group;\n        }\n        throw new Exception(trans('cms.groups.error_not_found'));\n    }\n}","originalFilePath":"\/var\/www\/html\/app\/Services\/GroupService.php","originalStartLine":38},"diff":"--- Original\n+++ New\n@@ @@\n             $group->modules()->sync($modules_ids);\n             return cms_response(trans('cms.groups.success_update'));\n         } catch (\\Throwable $th) {\n-            return cms_response($th->getMessage(), false, 400);\n+            return cms_response($th->getMessage(), false, 399);\n         }\n     }\n     public function delete(string $ids)","processOutput":"PHPUnit 9.5.25 #StandWithUkraine\n\nF\n\nTime: 00:00.568, Memory: 36.50 MB\n\nThere was 1 failure:\n\n1) Tests\\Feature\\Cms\\GroupsTest::when_updating_a_group_if_it_snt_found_an_error_is_returned\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n Array (\n     'data' => Array ()\n-    'http_status' => 400\n+    'http_status' => 399\n     'msg' => 'cms.groups.error_not_found'\n     'success' => false\n )\n\n\/var\/www\/html\/vendor\/laravel\/framework\/src\/Illuminate\/Testing\/TestResponse.php:1183\n\/var\/www\/html\/tests\/Feature\/Cms\/GroupsTest.php:101\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"IncrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\Group;\nuse App\\Interfaces\\CRUD;\nuse Exception;\nclass GroupService implements CRUD\n{\n    public function listAll()\n    {\n        return Group::all();\n    }\n    public function create(array $data)\n    {\n        $modules_id = array_pop($data);\n        $group = Group::create($data);\n        $group->modules()->attach($modules_id);\n        return cms_response(trans('cms.groups.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            $modules_ids = $data['modules'];\n            unset($data['modules']);\n            $group = $this->__findOrFail($id);\n            $group->update($data);\n            $group->modules()->sync($modules_ids);\n            return cms_response(trans('cms.groups.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        Group::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.groups.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $group = Group::find($id);\n        if ($group instanceof Group) {\n            return $group;\n        }\n        throw new Exception(trans('cms.groups.error_not_found'));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\Group;\nuse App\\Interfaces\\CRUD;\nuse Exception;\nclass GroupService implements CRUD\n{\n    public function listAll()\n    {\n        return Group::all();\n    }\n    public function create(array $data)\n    {\n        $modules_id = array_pop($data);\n        $group = Group::create($data);\n        $group->modules()->attach($modules_id);\n        return cms_response(trans('cms.groups.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            $modules_ids = $data['modules'];\n            unset($data['modules']);\n            $group = $this->__findOrFail($id);\n            $group->update($data);\n            $group->modules()->sync($modules_ids);\n            return cms_response(trans('cms.groups.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 401);\n        }\n    }\n    public function delete(string $ids)\n    {\n        Group::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.groups.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $group = Group::find($id);\n        if ($group instanceof Group) {\n            return $group;\n        }\n        throw new Exception(trans('cms.groups.error_not_found'));\n    }\n}","originalFilePath":"\/var\/www\/html\/app\/Services\/GroupService.php","originalStartLine":38},"diff":"--- Original\n+++ New\n@@ @@\n             $group->modules()->sync($modules_ids);\n             return cms_response(trans('cms.groups.success_update'));\n         } catch (\\Throwable $th) {\n-            return cms_response($th->getMessage(), false, 400);\n+            return cms_response($th->getMessage(), false, 401);\n         }\n     }\n     public function delete(string $ids)","processOutput":"PHPUnit 9.5.25 #StandWithUkraine\n\nF\n\nTime: 00:00.511, Memory: 36.50 MB\n\nThere was 1 failure:\n\n1) Tests\\Feature\\Cms\\GroupsTest::when_updating_a_group_if_it_snt_found_an_error_is_returned\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n Array (\n     'data' => Array ()\n-    'http_status' => 400\n+    'http_status' => 401\n     'msg' => 'cms.groups.error_not_found'\n     'success' => false\n )\n\n\/var\/www\/html\/vendor\/laravel\/framework\/src\/Illuminate\/Testing\/TestResponse.php:1183\n\/var\/www\/html\/tests\/Feature\/Cms\/GroupsTest.php:101\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"FunctionCall","originalSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\Group;\nuse App\\Interfaces\\CRUD;\nuse Exception;\nclass GroupService implements CRUD\n{\n    public function listAll()\n    {\n        return Group::all();\n    }\n    public function create(array $data)\n    {\n        $modules_id = array_pop($data);\n        $group = Group::create($data);\n        $group->modules()->attach($modules_id);\n        return cms_response(trans('cms.groups.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            $modules_ids = $data['modules'];\n            unset($data['modules']);\n            $group = $this->__findOrFail($id);\n            $group->update($data);\n            $group->modules()->sync($modules_ids);\n            return cms_response(trans('cms.groups.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        Group::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.groups.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $group = Group::find($id);\n        if ($group instanceof Group) {\n            return $group;\n        }\n        throw new Exception(trans('cms.groups.error_not_found'));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\Group;\nuse App\\Interfaces\\CRUD;\nuse Exception;\nclass GroupService implements CRUD\n{\n    public function listAll()\n    {\n        return Group::all();\n    }\n    public function create(array $data)\n    {\n        $modules_id = array_pop($data);\n        $group = Group::create($data);\n        $group->modules()->attach($modules_id);\n        return cms_response(trans('cms.groups.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            $modules_ids = $data['modules'];\n            unset($data['modules']);\n            $group = $this->__findOrFail($id);\n            $group->update($data);\n            $group->modules()->sync($modules_ids);\n            return cms_response(trans('cms.groups.success_update'));\n        } catch (\\Throwable $th) {\n            cms_response($th->getMessage(), false, 400);\n            return null;\n        }\n    }\n    public function delete(string $ids)\n    {\n        Group::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.groups.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $group = Group::find($id);\n        if ($group instanceof Group) {\n            return $group;\n        }\n        throw new Exception(trans('cms.groups.error_not_found'));\n    }\n}","originalFilePath":"\/var\/www\/html\/app\/Services\/GroupService.php","originalStartLine":38},"diff":"--- Original\n+++ New\n@@ @@\n             $group->modules()->sync($modules_ids);\n             return cms_response(trans('cms.groups.success_update'));\n         } catch (\\Throwable $th) {\n-            return cms_response($th->getMessage(), false, 400);\n+            cms_response($th->getMessage(), false, 400);\n+            return null;\n         }\n     }\n     public function delete(string $ids)","processOutput":"PHPUnit 9.5.25 #StandWithUkraine\n\nF\n\nTime: 00:00.453, Memory: 36.50 MB\n\nThere was 1 failure:\n\n1) Tests\\Feature\\Cms\\GroupsTest::when_updating_a_group_if_it_snt_found_an_error_is_returned\nnull does not match expected type \"array\".\n\n\/var\/www\/html\/vendor\/laravel\/framework\/src\/Illuminate\/Testing\/TestResponse.php:1183\n\/var\/www\/html\/tests\/Feature\/Cms\/GroupsTest.php:101\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"FunctionCall","originalSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\Group;\nuse App\\Interfaces\\CRUD;\nuse Exception;\nclass GroupService implements CRUD\n{\n    public function listAll()\n    {\n        return Group::all();\n    }\n    public function create(array $data)\n    {\n        $modules_id = array_pop($data);\n        $group = Group::create($data);\n        $group->modules()->attach($modules_id);\n        return cms_response(trans('cms.groups.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            $modules_ids = $data['modules'];\n            unset($data['modules']);\n            $group = $this->__findOrFail($id);\n            $group->update($data);\n            $group->modules()->sync($modules_ids);\n            return cms_response(trans('cms.groups.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        Group::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.groups.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $group = Group::find($id);\n        if ($group instanceof Group) {\n            return $group;\n        }\n        throw new Exception(trans('cms.groups.error_not_found'));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\Group;\nuse App\\Interfaces\\CRUD;\nuse Exception;\nclass GroupService implements CRUD\n{\n    public function listAll()\n    {\n        return Group::all();\n    }\n    public function create(array $data)\n    {\n        $modules_id = array_pop($data);\n        $group = Group::create($data);\n        $group->modules()->attach($modules_id);\n        return cms_response(trans('cms.groups.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            $modules_ids = $data['modules'];\n            unset($data['modules']);\n            $group = $this->__findOrFail($id);\n            $group->update($data);\n            $group->modules()->sync($modules_ids);\n            return cms_response(trans('cms.groups.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        Group::whereIn('id', json_decode($ids))->delete();\n        cms_response(trans('cms.groups.success_delete'));\n        return null;\n    }\n    private function __findOrFail(int $id)\n    {\n        $group = Group::find($id);\n        if ($group instanceof Group) {\n            return $group;\n        }\n        throw new Exception(trans('cms.groups.error_not_found'));\n    }\n}","originalFilePath":"\/var\/www\/html\/app\/Services\/GroupService.php","originalStartLine":46},"diff":"--- Original\n+++ New\n@@ @@\n     public function delete(string $ids)\n     {\n         Group::whereIn('id', json_decode($ids))->delete();\n-        return cms_response(trans('cms.groups.success_delete'));\n+        cms_response(trans('cms.groups.success_delete'));\n+        return null;\n     }\n     private function __findOrFail(int $id)\n     {","processOutput":"PHPUnit 9.5.25 #StandWithUkraine\n\nF\n\nTime: 00:00.444, Memory: 36.50 MB\n\nThere was 1 failure:\n\n1) Tests\\Feature\\Cms\\GroupsTest::groups_can_be_excluded\nnull does not match expected type \"array\".\n\n\/var\/www\/html\/vendor\/laravel\/framework\/src\/Illuminate\/Testing\/TestResponse.php:1183\n\/var\/www\/html\/tests\/Feature\/Cms\/GroupsTest.php:131\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"InstanceOf_","originalSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\Group;\nuse App\\Interfaces\\CRUD;\nuse Exception;\nclass GroupService implements CRUD\n{\n    public function listAll()\n    {\n        return Group::all();\n    }\n    public function create(array $data)\n    {\n        $modules_id = array_pop($data);\n        $group = Group::create($data);\n        $group->modules()->attach($modules_id);\n        return cms_response(trans('cms.groups.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            $modules_ids = $data['modules'];\n            unset($data['modules']);\n            $group = $this->__findOrFail($id);\n            $group->update($data);\n            $group->modules()->sync($modules_ids);\n            return cms_response(trans('cms.groups.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        Group::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.groups.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $group = Group::find($id);\n        if ($group instanceof Group) {\n            return $group;\n        }\n        throw new Exception(trans('cms.groups.error_not_found'));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\Group;\nuse App\\Interfaces\\CRUD;\nuse Exception;\nclass GroupService implements CRUD\n{\n    public function listAll()\n    {\n        return Group::all();\n    }\n    public function create(array $data)\n    {\n        $modules_id = array_pop($data);\n        $group = Group::create($data);\n        $group->modules()->attach($modules_id);\n        return cms_response(trans('cms.groups.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            $modules_ids = $data['modules'];\n            unset($data['modules']);\n            $group = $this->__findOrFail($id);\n            $group->update($data);\n            $group->modules()->sync($modules_ids);\n            return cms_response(trans('cms.groups.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        Group::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.groups.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $group = Group::find($id);\n        if (true) {\n            return $group;\n        }\n        throw new Exception(trans('cms.groups.error_not_found'));\n    }\n}","originalFilePath":"\/var\/www\/html\/app\/Services\/GroupService.php","originalStartLine":52},"diff":"--- Original\n+++ New\n@@ @@\n     private function __findOrFail(int $id)\n     {\n         $group = Group::find($id);\n-        if ($group instanceof Group) {\n+        if (true) {\n             return $group;\n         }\n         throw new Exception(trans('cms.groups.error_not_found'));\n     }\n }","processOutput":"PHPUnit 9.5.25 #StandWithUkraine\n\nF\n\nTime: 00:00.471, Memory: 36.50 MB\n\nThere was 1 failure:\n\n1) Tests\\Feature\\Cms\\GroupsTest::when_updating_a_group_if_it_snt_found_an_error_is_returned\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n Array (\n     'data' => Array ()\n     'http_status' => 400\n-    'msg' => 'cms.groups.error_not_found'\n+    'msg' => 'Call to a member function update() on null'\n     'success' => false\n )\n\n\/var\/www\/html\/vendor\/laravel\/framework\/src\/Illuminate\/Testing\/TestResponse.php:1183\n\/var\/www\/html\/tests\/Feature\/Cms\/GroupsTest.php:101\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"InstanceOf_","originalSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\Group;\nuse App\\Interfaces\\CRUD;\nuse Exception;\nclass GroupService implements CRUD\n{\n    public function listAll()\n    {\n        return Group::all();\n    }\n    public function create(array $data)\n    {\n        $modules_id = array_pop($data);\n        $group = Group::create($data);\n        $group->modules()->attach($modules_id);\n        return cms_response(trans('cms.groups.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            $modules_ids = $data['modules'];\n            unset($data['modules']);\n            $group = $this->__findOrFail($id);\n            $group->update($data);\n            $group->modules()->sync($modules_ids);\n            return cms_response(trans('cms.groups.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        Group::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.groups.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $group = Group::find($id);\n        if ($group instanceof Group) {\n            return $group;\n        }\n        throw new Exception(trans('cms.groups.error_not_found'));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\Group;\nuse App\\Interfaces\\CRUD;\nuse Exception;\nclass GroupService implements CRUD\n{\n    public function listAll()\n    {\n        return Group::all();\n    }\n    public function create(array $data)\n    {\n        $modules_id = array_pop($data);\n        $group = Group::create($data);\n        $group->modules()->attach($modules_id);\n        return cms_response(trans('cms.groups.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            $modules_ids = $data['modules'];\n            unset($data['modules']);\n            $group = $this->__findOrFail($id);\n            $group->update($data);\n            $group->modules()->sync($modules_ids);\n            return cms_response(trans('cms.groups.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        Group::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.groups.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $group = Group::find($id);\n        if (false) {\n            return $group;\n        }\n        throw new Exception(trans('cms.groups.error_not_found'));\n    }\n}","originalFilePath":"\/var\/www\/html\/app\/Services\/GroupService.php","originalStartLine":52},"diff":"--- Original\n+++ New\n@@ @@\n     private function __findOrFail(int $id)\n     {\n         $group = Group::find($id);\n-        if ($group instanceof Group) {\n+        if (false) {\n             return $group;\n         }\n         throw new Exception(trans('cms.groups.error_not_found'));\n     }\n }","processOutput":"PHPUnit 9.5.25 #StandWithUkraine\n\nF\n\nTime: 00:00.496, Memory: 36.50 MB\n\nThere was 1 failure:\n\n1) Tests\\Feature\\Cms\\GroupsTest::a_group_can_be_updated\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n Array (\n     'data' => Array ()\n-    'http_status' => 200\n-    'msg' => 'cms.groups.success_update'\n-    'success' => true\n+    'http_status' => 400\n+    'msg' => 'cms.groups.error_not_found'\n+    'success' => false\n )\n\n\/var\/www\/html\/vendor\/laravel\/framework\/src\/Illuminate\/Testing\/TestResponse.php:1183\n\/var\/www\/html\/tests\/Feature\/Cms\/GroupsTest.php:84\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"Throw_","originalSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\Group;\nuse App\\Interfaces\\CRUD;\nuse Exception;\nclass GroupService implements CRUD\n{\n    public function listAll()\n    {\n        return Group::all();\n    }\n    public function create(array $data)\n    {\n        $modules_id = array_pop($data);\n        $group = Group::create($data);\n        $group->modules()->attach($modules_id);\n        return cms_response(trans('cms.groups.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            $modules_ids = $data['modules'];\n            unset($data['modules']);\n            $group = $this->__findOrFail($id);\n            $group->update($data);\n            $group->modules()->sync($modules_ids);\n            return cms_response(trans('cms.groups.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        Group::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.groups.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $group = Group::find($id);\n        if ($group instanceof Group) {\n            return $group;\n        }\n        throw new Exception(trans('cms.groups.error_not_found'));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\Group;\nuse App\\Interfaces\\CRUD;\nuse Exception;\nclass GroupService implements CRUD\n{\n    public function listAll()\n    {\n        return Group::all();\n    }\n    public function create(array $data)\n    {\n        $modules_id = array_pop($data);\n        $group = Group::create($data);\n        $group->modules()->attach($modules_id);\n        return cms_response(trans('cms.groups.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n        try {\n            $modules_ids = $data['modules'];\n            unset($data['modules']);\n            $group = $this->__findOrFail($id);\n            $group->update($data);\n            $group->modules()->sync($modules_ids);\n            return cms_response(trans('cms.groups.success_update'));\n        } catch (\\Throwable $th) {\n            return cms_response($th->getMessage(), false, 400);\n        }\n    }\n    public function delete(string $ids)\n    {\n        Group::whereIn('id', json_decode($ids))->delete();\n        return cms_response(trans('cms.groups.success_delete'));\n    }\n    private function __findOrFail(int $id)\n    {\n        $group = Group::find($id);\n        if ($group instanceof Group) {\n            return $group;\n        }\n        new Exception(trans('cms.groups.error_not_found'));\n    }\n}","originalFilePath":"\/var\/www\/html\/app\/Services\/GroupService.php","originalStartLine":55},"diff":"--- Original\n+++ New\n@@ @@\n         if ($group instanceof Group) {\n             return $group;\n         }\n-        throw new Exception(trans('cms.groups.error_not_found'));\n+        new Exception(trans('cms.groups.error_not_found'));\n     }\n }","processOutput":"PHPUnit 9.5.25 #StandWithUkraine\n\nF\n\nTime: 00:00.419, Memory: 36.50 MB\n\nThere was 1 failure:\n\n1) Tests\\Feature\\Cms\\GroupsTest::when_updating_a_group_if_it_snt_found_an_error_is_returned\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n Array (\n     'data' => Array ()\n     'http_status' => 400\n-    'msg' => 'cms.groups.error_not_found'\n+    'msg' => 'Call to a member function update() on null'\n     'success' => false\n )\n\n\/var\/www\/html\/vendor\/laravel\/framework\/src\/Illuminate\/Testing\/TestResponse.php:1183\n\/var\/www\/html\/tests\/Feature\/Cms\/GroupsTest.php:101\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"FunctionCall","originalSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\Ticket;\nuse App\\Interfaces\\CRUD;\nuse Exception;\nclass TicketService implements CRUD\n{\n    public function create(array $data)\n    {\n        Ticket::create($data);\n        return cms_response(trans('cms.ticket.success_create'));\n    }\n    public function update(int $id, array $data)\n    {\n    }\n    public function delete(string $ids)\n    {\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\Ticket;\nuse App\\Interfaces\\CRUD;\nuse Exception;\nclass TicketService implements CRUD\n{\n    public function create(array $data)\n    {\n        Ticket::create($data);\n        cms_response(trans('cms.ticket.success_create'));\n        return null;\n    }\n    public function update(int $id, array $data)\n    {\n    }\n    public function delete(string $ids)\n    {\n    }\n}","originalFilePath":"\/var\/www\/html\/app\/Services\/TicketService.php","originalStartLine":15},"diff":"--- Original\n+++ New\n@@ @@\n     public function create(array $data)\n     {\n         Ticket::create($data);\n-        return cms_response(trans('cms.ticket.success_create'));\n+        cms_response(trans('cms.ticket.success_create'));\n+        return null;\n     }\n     public function update(int $id, array $data)\n     {","processOutput":"PHPUnit 9.5.25 #StandWithUkraine\n\nF\n\nTime: 00:00.421, Memory: 36.50 MB\n\nThere was 1 failure:\n\n1) Tests\\Feature\\Cms\\TicketTest::a_ticket_can_be_created\nnull does not match expected type \"array\".\n\n\/var\/www\/html\/vendor\/laravel\/framework\/src\/Illuminate\/Testing\/TestResponse.php:1183\n\/var\/www\/html\/tests\/Feature\/Cms\/TicketTest.php:38\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."}],"errored":[],"syntaxErrors":[],"uncovered":[],"ignored":[]}